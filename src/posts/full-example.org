#+TITLE: Down the Rabbit-Hole
#+DATE: <1865-11-26>
#+AUTHOR: Carroll, Lewis
#+OPTIONS: toc:nil num:nil
#+OPTIONS: ^:nil

Before we start with some prose, take a look at the [[https://orgmode.org/][Org-Mode]] website!

* Text Example

  Alice was beginning to get very tired of sitting by her sister on
  the bank, and of having nothing to do: once or twice she had peeped
  into the book her sister was reading, but it had no pictures or
  conversations in it, “and what is the use of a book,” thought Alice
  *“without pictures or conversations?”*

  So she was considering in her own mind (as well as she could, for
  the hot day made her feel very sleepy and stupid), whether the
  pleasure of making a daisy-chain would be worth the trouble of
  getting up and picking the daisies, when suddenly a White Rabbit
  with pink eyes ran close by her.

  There was nothing so _very_ remarkable in that; nor did Alice think
  it so _very_ much out of the way to hear the Rabbit say to itself,
  “Oh dear! Oh dear! I shall be late!” (when she thought it over
  afterwards, it occurred to her that she ought to have wondered at
  this, but at the time it all seemed quite natural); but when the
  Rabbit actually _took a watch out of its waistcoat-pocket_, and
  looked at it, and then hurried on, Alice started to her feet, for it
  flashed across her mind that she had never before seen a rabbit with
  either a waistcoat-pocket, or a watch to take out of it, and burning
  with curiosity, she ran across the field after it, and fortunately
  was just in time to see it pop down a large rabbit-hole under the
  hedge.

** Sub-section

   Here's an example of a piece of code:

   #+begin_src js
   // JavaScript API for compiling a grammar and binding
   // semantic actions to the generated parser
   const grammar = `
     Additive  <- Multitive '+' Additive / Multitive
     Multitive <- Primary '*' Multitive / Primary
     Primary   <- '(' Additive ')' / Number
     Number    <- [0-9]+
   `;
   const parser = peg.pegc(grammar).bind({
   // The name of the action must correspond to the name of the rule
   // present in the grammar string.  The function `visit` gives the
   // control over when the child nodes will be visited.  That allows
   // executing code before and after visiting happens.  This is very
   // useful during the code generation step on the compiler.
   Additive: ({ visit }) => {
     const v = visit();
       // Ignore the string '+'
       return Array.isArray(v) ? v[0] + v[2] : v;
     },
     Multitive: ({ visit }) => {
       const v = visit();
       // Ignore the string '*'
       return Array.isArray(v) ? v[0] * v[2] : v;
     },
     Primary: ({ visit }) => {
       const v = visit();
       // Remove '(' and ')'
       return Array.isArray(v) ? v[1] : v;
     },
     Number: ({ visit }) => {
       const v = visit();
       const n = Array.isArray(v) ? v.join('') : v;
       return parseInt(n, 10);
     }
   });

   assertTrue(parser('42') === 42);
   assertTrue(parser('40+2*5') === 50);
   assertTrue(parser('(40+2)*5') === 210);
   #+end_src

** Unordered Bullet Points

   * [[https://www.gnu.org/software/emacs/][GNU Emacs]]
   * [[https://orgmode.org/][Org-Mode]]
   * [[https://emacs.love/weblorg/][weblorg]]
